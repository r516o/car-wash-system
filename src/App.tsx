// src/App.tsx โ ูุณุฎุฉ ูุญุณููุฉ ุชููุน ุงูุชุฌููุฏ ูุชุฏุนู ุงูุฅุบูุงู ุงูุณูุณ
import { useState, useEffect } from 'react'
import './App.css'
import * as storage from './lib/storage/localStorage'
import * as dataManager from './lib/storage/dataManager'
import { generateInitialData } from './lib/data/dataGenerator'
import { generateBulkSchedule } from './lib/algorithms/autoScheduler'
import type { Customer } from './types/customer.types'
import type { Appointment } from './types/appointment.types'

// SVG Icons
const IconPlus = () => <svg width="18" height="18" viewBox="0 0 24 24" fill="none"><path d="M12 5v14M5 12h14" stroke="currentColor" strokeWidth="2" strokeLinecap="round"/></svg>
const IconZap = () => <svg width="18" height="18" viewBox="0 0 24 24" fill="none"><path d="M13 2L3 14h7l-1 8 10-12h-7l1-8z" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/></svg>
const IconRefresh = () => <svg width="18" height="18" viewBox="0 0 24 24" fill="none"><path d="M20 7a8 8 0 10.25 5H17m3 0V7h-5" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/></svg>
const IconBack = () => <svg width="18" height="18" viewBox="0 0 24 24" fill="none"><path d="M15 18l-6-6 6-6" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/></svg>
const IconCalendar = () => <svg width="22" height="22" viewBox="0 0 24 24" fill="none"><rect x="3" y="5" width="18" height="16" rx="2" stroke="currentColor" strokeWidth="2"/><path d="M16 3v4M8 3v4M3 11h18" stroke="currentColor" strokeWidth="2" strokeLinecap="round"/></svg>
const IconX = () => <svg width="20" height="20" viewBox="0 0 24 24" fill="none"><path d="M18 6L6 18M6 6l12 12" stroke="currentColor" strokeWidth="2" strokeLinecap="round"/></svg>

type Role = 'selection' | 'employee' | 'manager'

export default function App() {
  const [role, setRole] = useState<Role>('selection')
  const [customers, setCustomers] = useState<Customer[]>([])
  const [appointments, setAppointments] = useState<Appointment[]>([])
  const [loading, setLoading] = useState(true)

  const [showAddCustomer, setShowAddCustomer] = useState(false)
  const [showAutoScheduler, setShowAutoScheduler] = useState(false)
  const [schedulingProgress, setSchedulingProgress] = useState('')
  const [closingWithEsc, setClosingWithEsc] = useState(false)

  useEffect(() => {
    let c = storage.getCustomers()
    let a = storage.getAppointments()
    if (c.length === 0) {
      const init = generateInitialData()
      storage.setCustomers(init.customers)
      storage.setAppointments(init.appointments)
      c = init.customers
      a = init.appointments
    }
    setCustomers(c)
    setAppointments(a)
    setLoading(false)
  }, [])

  // ููุน ุชูุฑูุฑ ุงูุฎูููุฉ + ุฏุนู ุฒุฑ Escape
  useEffect(() => {
    const hasModal = showAddCustomer || showAutoScheduler
    if (hasModal) document.body.classList.add('modal-open')
    else document.body.classList.remove('modal-open')

    const onKeyDown = (e: KeyboardEvent) => {
      if (e.key === 'Escape') {
        setClosingWithEsc(true)
        setShowAddCustomer(false)
        setShowAutoScheduler(false)
        setTimeout(() => setClosingWithEsc(false), 100)
      }
    }
    window.addEventListener('keydown', onKeyDown)
    return () => {
      window.removeEventListener('keydown', onKeyDown)
      document.body.classList.remove('modal-open')
    }
  }, [showAddCustomer, showAutoScheduler])

  const reload = () => {
    setCustomers(storage.getCustomers())
    setAppointments(storage.getAppointments())
  }

  // ุฌุฏููุฉ ุจุฏููุนุงุช ูููุน ุชุฌููุฏ ุงููุงุฌูุฉ
  const handleAutoSchedule = async () => {
    setSchedulingProgress('๐ ุฌุงุฑู ุงูุฌุฏููุฉ...')
    const year = new Date().getFullYear()
    const month = new Date().getMonth() + 1
    const batchSize = 15
    let totalScheduled = 0
    let totalFailed = 0
    let processed = 0
    // ูุนูู ุนูู ูุงุฆูุฉ ููุงุนูุฏ ูุญููุฉ ูุชุฑุงูู ุงููุชุงุฆุฌ ุจูู ุงูุฏููุนุงุช
    let currentAppointments = [...appointments]

    try {
      for (let i = 0; i < customers.length; i += batchSize) {
        // ุฅุชุงุญุฉ โูุจุถุฉโ ูููุชุตูุญ ูุจู ูู ุฏูุนุฉ
        await new Promise((r) => setTimeout(r, 0))
        const batch = customers.slice(i, i + batchSize)
        const res = generateBulkSchedule(batch, year, month, currentAppointments)
        const newApts = res.results.flatMap(r => r.result.schedule)
        if (newApts.length) {
          storage.addAppointments(newApts)
          currentAppointments.push(...newApts)
          totalScheduled += newApts.length
          reload()
        }
        totalFailed += res.totalFailed
        processed = Math.min(i + batchSize, customers.length)
        setSchedulingProgress(`ุฌุงุฑู ุงูุฌุฏููุฉ... ${processed}/${customers.length}`)
      }
      setSchedulingProgress(`โ ุชู ุฌุฏููุฉ ${totalScheduled} ููุนุฏุ ูุดู ${totalFailed}`)
    } catch (err) {
      console.error(err)
      setSchedulingProgress('โ ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ุงูุฌุฏููุฉ')
    } finally {
      // ุฅุบูุงู ุชููุงุฆู ุจุนุฏ ุซุงููุชูู
      setTimeout(() => {
        setShowAutoScheduler(false)
        setSchedulingProgress('')
      }, 2000)
    }
  }

  const handleStatusChange = (id: number, newStatus: 'ููุชูู' | 'ุบุงุฆุจ') => {
    if (newStatus === 'ููุชูู') dataManager.completeAppointmentAndUpdateCustomer(id)
    else dataManager.markAppointmentMissed(id)
    reload()
  }

  const todayISO = new Date().toISOString().split('T')[0]
  const today = appointments.filter(a => a.date === todayISO)
  const completed = today.filter(a => a.status === 'ููุชูู').length
  const missed = today.filter(a => a.status === 'ุบุงุฆุจ').length
  const remaining = today.length - completed - missed

  if (loading) {
    return (
      <div className="loading-screen">
        <div className="spinner" />
        <p className="loading-text">ุฌุงุฑู ุงูุชุญููู...</p>
      </div>
    )
  }

  if (role === 'selection') {
    return (
      <div className="role-selection-page">
        <div className="role-container">
          <div className="role-header">
            <div className="role-icon">๐</div>
            <h1 className="role-title">ูุธุงู ุฅุฏุงุฑุฉ ุบุณูู ุงูุณูุงุฑุงุช ุงููุชููู</h1>
            <p className="role-subtitle">ูุฃุชู ุฅููู ุฃูููุง ููุช - ุฎุฏูุฉ ุงุญุชุฑุงููุฉ ูุชููุฒุฉ</p>
          </div>
          <div className="role-cards">
            <div className="role-card" onClick={() => setRole('employee')}>
              <div className="role-card-icon">๐จโ๐ผ</div>
              <h3 className="role-card-title">ุฏุฎูู ุงูููุธู</h3>
              <p className="role-card-desc">ุฅุฏุงุฑุฉ ุงูููุงุนูุฏ ุงูููููุฉ ูุชุชุจุน ุญุงูุฉ ุงูุบุณูุงุช</p>
              <ul className="role-card-features">
                <li>โ ุนุฑุถ ููุงุนูุฏ ุงูููู</li>
                <li>โ ุชุญุฏูุซ ุญุงูุฉ ุงูุบุณูุงุช</li>
                <li>โ ุฅุนุงุฏุฉ ุฌุฏููุฉ ุงูููุงุนูุฏ</li>
                <li>โ ุฅุญุตุงุฆูุงุช ุณุฑูุนุฉ</li>
              </ul>
            </div>
            <div className="role-card" onClick={() => setRole('manager')}>
              <div className="role-card-icon">๐จโ๐ป</div>
              <h3 className="role-card-title">ุฏุฎูู ุงููุฏูุฑ</h3>
              <p className="role-card-desc">ุฅุฏุงุฑุฉ ุดุงููุฉ ูููุธุงู ูุงูุนููุงุก ูุงูุชูุงุฑูุฑ</p>
              <ul className="role-card-features role-card-features-manager">
                <li>โ ููุญุฉ ูุนูููุงุช ุดุงููุฉ</li>
                <li>โ ุฅุฏุงุฑุฉ ุงูุนููุงุก</li>
                <li>โ ุงูุฌุฏูู ุงูุดูุฑู</li>
                <li>โ ุงูุชูุงุฑูุฑ ูุงูุฅุญุตุงุฆูุงุช</li>
              </ul>
            </div>
          </div>
          <p className="role-footer">ุงุฎุชุฑ ุงูุฏูุฑ ุงูููุงุณุจ ูููุตูู ูููุธุงู</p>
        </div>
      </div>
    )
  }

  return (
    <div className="dashboard-page">
      <header className="dashboard-header">
        <div className="header-content">
          <div className="header-left">
            <div className="header-logo">๐</div>
            <div className="header-title">
              <h1>ูุธุงู ุบุณูู ุงูุณูุงุฑุงุช</h1>
              <p className="header-subtitle">{role === 'employee' ? 'ููุญุฉ ุงูููุธู' : 'ููุญุฉ ุงููุฏูุฑ'}</p>
            </div>
          </div>
          <div className="header-right">
            <div className="header-date">
              <span className="date-icon"><IconCalendar /></span>
              <span>{new Date().toLocaleDateString('ar-SA', { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' })}</span>
            </div>
            <button className="header-btn btn-refresh" onClick={reload} type="button">
              <span className="btn-icon"><IconRefresh /></span>
              <span className="btn-text">ุชุญุฏูุซ</span>
            </button>
            <button className="header-btn btn-switch" onClick={() => setRole(role === 'employee' ? 'manager' : 'employee')} type="button">
              <span className="btn-icon">๐</span>
              <span className="btn-text">{role === 'employee' ? 'ุงููุฏูุฑ' : 'ุงูููุธู'}</span>
            </button>
            <button className="header-btn btn-back" onClick={() => setRole('selection')} type="button">
              <span className="btn-icon"><IconBack /></span>
              <span className="btn-text">ุฑุฌูุน</span>
            </button>
            <button className="header-btn btn-add" onClick={() => setShowAddCustomer(true)} type="button">
              <span className="btn-icon"><IconPlus /></span>
              <span className="btn-text">ุฅุถุงูุฉ ุนููู</span>
            </button>
            <button className="header-btn btn-auto" onClick={() => setShowAutoScheduler(true)} type="button">
              <span className="btn-icon"><IconZap /></span>
              <span className="btn-text">ุฌุฏููุฉ ุชููุงุฆูุฉ</span>
            </button>
          </div>
        </div>
      </header>

      <main className="dashboard-main">
        <div className="stats-container">
          <div className="stat-box stat-primary">
            <div className="stat-icon">๐</div>
            <div className="stat-content">
              <div className="stat-label">ููุงุนูุฏ ุงูููู</div>
              <div className="stat-value">{today.length}</div>
            </div>
          </div>
          <div className="stat-box stat-success">
            <div className="stat-icon">โ</div>
            <div className="stat-content">
              <div className="stat-label">ุงูููุชููุฉ</div>
              <div className="stat-value">{completed}</div>
            </div>
          </div>
          <div className="stat-box stat-warning">
            <div className="stat-icon">โณ</div>
            <div className="stat-content">
              <div className="stat-label">ุงููุชุจููุฉ</div>
              <div className="stat-value">{remaining}</div>
            </div>
          </div>
          <div className="stat-box stat-danger">
            <div className="stat-icon">โ</div>
            <div className="stat-content">
              <div className="stat-label">ุงูุบุงุฆุจูู</div>
              <div className="stat-value">{missed}</div>
            </div>
          </div>
        </div>

        <div className="appointments-section">
          <div className="section-header">
            <h2 className="section-title"><span className="title-icon">๐</span>ููุงุนูุฏ ุงูููู</h2>
            <div className="section-info">
              <span className="info-badge">{today.length} ููุนุฏ</span>
            </div>
          </div>
          <div className="table-wrapper">
            <table className="appointments-table">
              <thead>
                <tr>
                  <th>ุงูููุช</th>
                  <th>ุงุณู ุงูุนููู</th>
                  <th>ููุน ุงูุณูุงุฑุฉ</th>
                  <th>ุญุฌู ุงูุณูุงุฑุฉ</th>
                  <th>ุฑูู ุงูุฌูุงู</th>
                  <th>ุงูุบุณูุฉ ุฑูู</th>
                  <th>ุงูุญุงูุฉ</th>
                  <th>ุงูุฅุฌุฑุงุกุงุช</th>
                </tr>
              </thead>
              <tbody>
                {today.length === 0 ? (
                  <tr>
                    <td colSpan={8} className="empty-state">
                      <div className="empty-icon">๐ญ</div>
                      <p>ูุง ุชูุฌุฏ ููุงุนูุฏ ููุฐุง ุงูููู</p>
                    </td>
                  </tr>
                ) : (
                  today.map(a => (
                    <tr key={a.id} className="table-row">
                      <td className="td-time">{a.time}</td>
                      <td className="td-name">{a.customerName}</td>
                      <td className="td-car">{a.carType}</td>
                      <td className="td-size">{a.carSize}</td>
                      <td className="td-phone">{a.phone}</td>
                      <td className="td-wash">#{a.washNumber}</td>
                      <td className="td-status">
                        <span className={`status-pill ${
                          a.status === 'ููุชูู' ? 'status-completed' :
                          a.status === 'ุบุงุฆุจ' ? 'status-missed' : 'status-scheduled'
                        }`}>{a.status}</span>
                      </td>
                      <td className="td-actions">
                        {a.status === 'ูุงุฏู' && (
                          <>
                            <button className="action-btn btn-complete" onClick={() => handleStatusChange(a.id, 'ููุชูู')} title="ุงูุชูู" type="button">โ</button>
                            <button className="action-btn btn-miss" onClick={() => handleStatusChange(a.id, 'ุบุงุฆุจ')} title="ุบุงุฆุจ" type="button">โ</button>
                          </>
                        )}
                      </td>
                    </tr>
                  ))
                )}
              </tbody>
            </table>
          </div>
        </div>

        <div className="info-section">
          <div className="info-card">
            <h3 className="info-title">๐ ุฅุญุตุงุฆูุงุช ุณุฑูุนุฉ</h3>
            <div className="info-grid">
              <div className="info-item">
                <span className="info-label">ุฅุฌูุงูู ุงูุนููุงุก</span>
                <span className="info-value">{customers.length}</span>
              </div>
              <div className="info-item">
                <span className="info-label">ุฅุฌูุงูู ุงูููุงุนูุฏ</span>
                <span className="info-value">{appointments.length}</span>
              </div>
              <div className="info-item">
                <span className="info-label">ูุนุฏู ุงูุฅูุฌุงุฒ</span>
                <span className="info-value">{today.length ? Math.round((completed / today.length) * 100) : 0}%</span>
              </div>
            </div>
          </div>
        </div>
      </main>

      {/* Modal: Add Customer */}
      {showAddCustomer && (
        <div className="modal" onClick={() => setShowAddCustomer(false)}>
          <div className="modal-content" onClick={e => e.stopPropagation()}>
            <div className="modal-header">
              <h3 className="modal-title">ุฅุถุงูุฉ ุนููู ุฌุฏูุฏ</h3>
              <button className="modal-close" onClick={() => setShowAddCustomer(false)} type="button">
                <IconX />
              </button>
            </div>
            <div className="modal-body">
              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">ุงุณู ุงูุนููู</label>
                  <input type="text" className="w-full px-4 py-2 border border-gray-300 rounded-lg" placeholder="ุฃุฏุฎู ุงุณู ุงูุนููู" />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">ุฑูู ุงูุฌูุงู</label>
                  <input type="tel" className="w-full px-4 py-2 border border-gray-300 rounded-lg" placeholder="05XXXXXXXX" />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">ููุน ุงูุณูุงุฑุฉ</label>
                  <input type="text" className="w-full px-4 py-2 border border-gray-300 rounded-lg" placeholder="ูุซุงู: ุชูููุชุง ูุงูุฑู" />
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">ุญุฌู ุงูุณูุงุฑุฉ</label>
                  <select className="w-full px-4 py-2 border border-gray-300 rounded-lg">
                    <option>ุตุบูุฑุฉ</option>
                    <option>ูุชูุณุทุฉ</option>
                    <option>ูุจูุฑุฉ</option>
                  </select>
                </div>
              </div>
            </div>
            <div className="modal-footer">
              <button className="header-btn btn-add" type="button" onClick={() => { alert('ุณูุชู ุญูุธ ุงูุนููู ููุง'); setShowAddCustomer(false) }}>
                ุญูุธ ุงูุนููู
              </button>
              <button className="header-btn btn-back" type="button" onClick={() => setShowAddCustomer(false)}>
                ุฅูุบุงุก
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Modal: Auto Scheduler */}
      {showAutoScheduler && (
        <div className="modal" onClick={() => setShowAutoScheduler(false)}>
          <div className="modal-content" onClick={e => e.stopPropagation()}>
            <div className="modal-header">
              <h3 className="modal-title">ุงูุฌุฏููุฉ ุงูุชููุงุฆูุฉ</h3>
              <button className="modal-close" type="button" onClick={() => setShowAutoScheduler(false)}>
                <IconX />
              </button>
            </div>
            <div className="modal-body">
              <div className="space-y-4">
                <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
                  <p className="text-blue-800 font-semibold mb-2">๐ ุฌุฏููุฉ {customers.length} ุนููู</p>
                  <p className="text-blue-600 text-sm">ุงูุดูุฑ: {new Date().toLocaleDateString('ar-SA', { month: 'long', year: 'numeric' })}</p>
                </div>
                {schedulingProgress && <div className="alert-info">{schedulingProgress}</div>}
                <div className="bg-gray-50 rounded-lg p-4 text-sm text-gray-600">
                  <p className="mb-2">โน๏ธ ููุงุญุธุงุช:</p>
                  <ul className="list-disc list-inside space-y-1">
                    <li>ุณูุชู ุชูุฒูุน 10 ุบุณูุงุช ููู ุนููู</li>
                    <li>ุงููุงุฑู ุจูู ุงูุบุณูุงุช: 3 ุฃูุงู</li>
                    <li>ูุฑุงุนุงุฉ ุงูุฃูุงู ุงูููุถูุฉ</li>
                  </ul>
                </div>
              </div>
            </div>
            <div className="modal-footer">
              <button className="header-btn btn-auto" type="button" onClick={handleAutoSchedule} disabled={!!schedulingProgress}>
                {schedulingProgress ? 'ุฌุงุฑู ุงูุฌุฏููุฉ...' : 'ุจุฏุก ุงูุฌุฏููุฉ'}
              </button>
              <button className="header-btn btn-back" type="button" onClick={() => { setShowAutoScheduler(false); setSchedulingProgress('') }}>
                ุฅูุบุงุก
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  )
}
